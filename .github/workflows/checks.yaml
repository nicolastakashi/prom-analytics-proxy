name: Checks
on:
  pull_request:
  push:
    branches:
      - "main"

concurrency:
  group: checks-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    name: Changes
    outputs:
      go: ${{ steps.filter.outputs.go }}
      ui: ${{ steps.filter.outputs.ui }}
      docs: ${{ steps.filter.outputs.docs }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            go:
              - 'go.mod'
              - 'go.sum'
              - 'main.go'
              - 'internal/**'
              - 'api/**'
              - 'scripts/**'
              - 'Makefile'
              - 'Dockerfile'
            ui:
              - 'ui/**'
            docs:
              - '**/*.md'
            workflows:
              - '.github/**'

  build-ui:
    needs: changes
    if: ${{ github.event_name == 'push' || needs.changes.outputs.ui == 'true' || needs.changes.outputs.go == 'true' || needs.changes.outputs.workflows == 'true' || needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    name: Build UI
    steps:
      - uses: actions/checkout@v4
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.node-version }}"
          check-latest: true
          cache: "npm"
          cache-dependency-path: "ui/package-lock.json"
          registry-url: "https://registry.npmjs.org"
      - name: Install UI dependencies
        working-directory: ui
        run: npm ci --legacy-peer-deps
      - name: Build UI
        working-directory: ui
        run: npm run build
      - name: Upload UI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: ui/dist
          retention-days: 1

  check-golang:
    needs: [build-ui, changes]
    runs-on: ubuntu-latest
    name: Go Code Quality Checks
    if: ${{ github.event_name == 'push' || needs.changes.outputs.go == 'true' || needs.changes.outputs.workflows == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.golang-version }}"
          check-latest: true
          cache: true
      - name: Download UI artifacts
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/dist
      - name: Tidy Go modules and check for changes
        run: make tidy && git diff --exit-code
      - name: Run GolangCI Lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          args: --timeout 10m0s

  test:
    needs: [changes]
    runs-on: ubuntu-latest
    name: Unit Tests
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.golang-version }}"
          check-latest: true
          cache: true
      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@v1.12.0
      - name: Install go-ctrf-json-reporter
        run: go install github.com/ctrf-io/go-ctrf-json-reporter/cmd/go-ctrf-json-reporter@latest
      - name: Run unit tests and produce CTRF JSON
        run: |
          mkdir -p ctrf
          $(go env GOPATH)/bin/gotestsum \
            --format=short-verbose \
            --jsonfile gotestsum.json \
            -- -race -cover -covermode=atomic -coverprofile=coverage.out ./...
          $(go env GOPATH)/bin/go-ctrf-json-reporter < gotestsum.json -output ctrf/ctrf-report.json
      - name: Coverage Summary
        if: always()
        run: |
          if [ -f coverage.out ]; then
            echo "### Coverage" >> $GITHUB_STEP_SUMMARY
            echo "$(go tool cover -func=coverage.out | tail -n 1 | awk '{print $3}')" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            gotestsum.json
            ctrf/ctrf-report.json
          retention-days: 7
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
          retention-days: 7
      - name: Publish Test Report (Visual Overview)
        if: always()
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf/*.json'
          summary-report: true
          failed-report: true
          flaky-rate-report: true
          insights-report: true
          test-report: true
          report-order: 'summary-report,failed-report,flaky-rate-report,insights-report,test-report'
          pull-request: true
          status-check: true
          status-check-name: 'Go Tests'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  format:
    needs: [build-ui, changes]
    runs-on: ubuntu-latest
    name: Documentation Formatting Check
    if: ${{ github.event_name == 'push' || needs.changes.outputs.docs == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.golang-version }}"
          check-latest: true
          cache: true
      - name: Download UI artifacts
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/dist
      - name: Cache tooling binaries
        uses: actions/cache@v4
        with:
          path: tmp/bin
          key: tooling-${{ runner.os }}-${{ hashFiles('scripts/go.mod') }}
      - name: Tidy Go modules
        run: make tidy
      - name: Check Documentation
        run: make check-docs

  build:
    needs: [build-ui, changes]
    if: ${{ github.event_name == 'push' || needs.changes.outputs.go == 'true' || needs.changes.outputs.ui == 'true' || needs.changes.outputs.workflows == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
    name: Build API for ${{ matrix.goos }}
    steps:
      - uses: actions/checkout@v4
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.golang-version }}"
          check-latest: true
          cache: true
      - name: Download UI artifacts
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/dist
      - name: Build API
        env:
          GOOS: ${{ matrix.goos }}
        run: make build
